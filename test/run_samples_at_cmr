#!/usr/bin/env python3

import os
import sys
import subprocess

# Run from base dir of repo
# $ pixi run -e dev python test/run_samples_at_cmr
#
# For now, need to make sure manually that all the mqsub'd jobs finish without error at the end.
# Randomly selected via Sandpiper
# Gut: SRR29134037, SRR6028613, SRR17283995
# Soil: SRR28059992, SRR30718229, SRR26545921
# Ocean: ERR599108, SRR13153254, ERR12716859

DATA_DIR = "/work/microbiome/aviary_module_benchmarking/data/test_data"
COMMIT = subprocess.Popen(["git", "rev-parse", "HEAD"], stdout=subprocess.PIPE, text=True).communicate()[0].strip()
OUTPUT_DIR = f"/work/microbiome/users_large/aroneys/aviary_test_samples/{COMMIT}"

SAMPLES_LIST = "test/test_samples.tsv"
samples_list = {}
with open(SAMPLES_LIST) as f:
    for line in f:
        sample = line.strip().split("\t")[0]
        samples_list[sample] = line.strip().split("\t")[1].split(",")

os.makedirs(OUTPUT_DIR, exist_ok=True)

fails = 0
for sample, cobinning in samples_list.items():
    with open(f"test/qsub-{sample}-log.txt", "w") as log_file:
        print(f"Running sample {sample}, outputting to {OUTPUT_DIR}/{sample}")

        forward_reads = [f"{DATA_DIR}/{sample}_1.fastq.gz" for sample in cobinning]
        reverse_reads = [f"{DATA_DIR}/{sample}_2.fastq.gz" for sample in cobinning]

        process = subprocess.Popen(
            [
                "pixi", "run", "--frozen", "--manifest-path", "aviary/pixi.toml", "-e", "dev",
                "aviary", "recover",
                "-o", f"{OUTPUT_DIR}/{sample}",
                "-1"] + forward_reads + [
                "-2"] + reverse_reads + [
                "--binning-only", "--request-gpu",
                "-n", "32", "-t", "32", "--local-cores", "1",
                "-m", "256", "--coassemble", "no",
                "--snakemake-profile", "aqua", "--cluster-retries", "3",
            ],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True
        )
        for line in process.stdout:
            print(line, end="")
            log_file.write(line)
        process.wait()
        # check return code
        if process.returncode != 0:
            print(f"Error: qsub tests failed with return code {process.returncode}.")
            print("Check the log file test/qsub-test-log.txt for details.")
            fails += 1
        else:
            print("tests marked qsub appear to have run successfully, but check the log file test/qsub-test-log.txt for details.\n")

if fails > 0:
    print(f"Total number of jobs with FAILED lines: {fails}")
    sys.exit(fails)
else:
    print("All jobs completed successfully without FAILED lines in their output. Win.")

    with open(f"{OUTPUT_DIR}/summary.tsv", "w") as summary_file:
        summary_file.write("Sample\tScore\tGenomes\n")
        for sample in samples_list:
            print(f"Processing results for sample {sample} in {OUTPUT_DIR}/{sample}")

            sample_score = 0
            sample_genomes = 0
            with open(f"{OUTPUT_DIR}/{sample}/bins/bin_info.tsv") as bin_info_file:
                header = True
                for line in bin_info_file:
                    columns = line.strip().split("\t")

                    if header:
                        comp_col = columns.index("Completeness (CheckM2)")
                        cont_col = columns.index("Contamination (CheckM2)")
                        header = False
                    else:
                        completeness = float(columns[comp_col])
                        contamination = float(columns[cont_col])
                        quality = completeness - 5 * contamination

                        if quality >= 50:
                            sample_score += quality
                            sample_genomes += 1

            print(f"Sample {sample} has {sample_genomes} genomes with total score {sample_score}")
            summary_file.write(f"{sample}\t{sample_score}\t{sample_genomes}\n")

    sys.exit(0)
